---
description: Enums模块编码规则
globs: src/enums/**/*
---
# Enums模块编码规则

## 文件结构

- 所有枚举定义应放在`src/enums/modules`目录下
- 按业务功能或实体类型进行分类
- 在`src/enums/index.ts`中统一导出所有模块

## 命名规范

- 文件名使用小写字母，采用camelCase命名法
- 枚举名使用`enum`前缀，后接大驼峰命名，如`enumStatus`
- 枚举值使用小驼峰命名法

## 代码规范

- 优先使用`const enum`定义枚举，提高性能
- 为每个枚举和枚举值添加注释，说明用途
- 枚举值应具有语义化，避免使用数字或无意义的代码
- 相关枚举应组织在同一个文件中

## 示例代码

```typescript
/**
 * 通用状态枚举
 */
export const enum enumState {
	enabled = 'enabled',
	disabled = 'disabled',
}

/**
 * 用户角色枚举
 */
export const enum enumUserRole {
	admin = 'admin',
	user = 'user',
	guest = 'guest',
}

/**
 * 操作类型枚举
 */
export const enum enumOperationType {
	create = 'create',
	read = 'read',
	update = 'update',
	delete = 'delete',
}
```

## 枚举实现要求

1. 每个枚举前添加注释，说明用途
2. 枚举值使用字符串类型，便于调试和维护
3. 相关枚举应保持一致的命名风格
4. 枚举值应有明确的业务含义

## 模块导出方式

在`src/enums/index.ts`中统一使用命名空间方式导出：

```typescript
import * as common from './modules/common'
import * as user from './modules/user'

export default {
	common,
	user,
}
```

## 枚举使用建议

1. 使用枚举代替硬编码的字符串常量
2. 在条件判断中使用枚举提高代码可读性
3. 在API请求和表单校验中使用枚举统一规范
4. 在组件prop中使用枚举限定可选值范围
