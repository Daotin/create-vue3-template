---
description: "业务模块开发顺序规范，定义了从接口到页面的完整开发流程和最佳实践"
globs: 
alwaysApply: false
priority: 1
---

# 业务模块开发顺序规范

## 适用场景

- 开发新的业务功能模块时
- 重构现有业务模块时
- 需要团队成员遵循统一的开发流程时

## 关键规则

开发一个业务模块必须按照以下顺序进行：

1. 在`apis`目录中定义所有模块相关API
2. 在`mock`目录下实现请求模拟
3. 在`models`中定义数据模型（优先定义API返回数据）
4. 在`config/enum.ts`中定义相关枚举
5. 编写模块路由配置
6. 编写业务代码（UI和逻辑）
7. 添加国际化支持
8. 实现权限控制

## 详细流程

### 1. API定义

- 将接口文档中该模块涉及的所有API一次性定义在`src/apis/modules`目录
- 按照API规范命名和实现接口函数
- 确保所有API调用方式统一且类型完整

### 2. Mock实现

- 在`mock`目录下对请求进行拦截和模拟
- 模拟数据应尽量符合真实数据结构和业务场景
- 模拟各种响应状态（成功、失败、异常等）

### 3. 数据模型定义

- 在`models`目录下定义模块相关的数据模型
- **优先定义API返回数据的类型**
- 定义表单数据、状态数据等相关模型

### 4. 枚举定义

- 将该功能涉及的所有前端枚举一次性定义在`config/enum.ts`
- 确保枚举命名规范且有清晰注释
- 为复杂枚举添加辅助函数（如获取枚举文本等）

### 5. 路由配置

- 在路由配置中添加新模块的路由
- 设置正确的路由嵌套关系
- 配置必要的路由元信息（标题、图标等）

### 6. 业务代码开发

- 参考`src/views/demo`下的文件模板组织代码
- 实现页面UI和交互逻辑
- 保证代码结构清晰、组件复用

### 7. 国际化

- 为路由标题添加国际化支持
- 为页面文本添加国际化配置
- 确保所有用户可见文本都支持多语言

### 8. 权限控制

- 使用`v-auth`指令添加元素级权限控制
- 配置路由访问权限
- 确保按钮、操作等敏感功能有权限控制

## 示例

<example>
// 1. 定义API (src/apis/modules/user-management.ts)
import request from '@/utils/request'
import type { IUserQueryParams, IUserList } from '@/models/user'

// 获取用户列表
export const apiGetUserList = (params: IUserQueryParams) => 
  request.get<IUserList>('/user/list', { params })

// 2. 添加Mock (mock/user.ts)
import Mock from 'mockjs'
import { success } from './util'

Mock.mock(/\/user\/list/, 'get', (options) => {
  return success({
    total: 100,
    list: [{ id: 1, name: '张三', role: 'admin' }]
  })
})

// 3. 定义Model (models/user.ts)
export interface IUserQueryParams {
  pageNum: number
  pageSize: number
  keyword?: string
}

export interface IUserList {
  total: number
  list: IUser[]
}

export interface IUser {
  id: number
  name: string
  role: string
}

// 4. 定义枚举 (config/enum.ts)
export const UserRole = {
  ADMIN: 'admin',
  USER: 'user',
  GUEST: 'guest',
}

// 5. 路由配置
{
  path: '/user',
  component: Layout,
  meta: { title: 'route.system.userManagement', icon: 'user' },
  children: [
    {
      path: 'list',
      component: () => import('@/views/user/list.vue'),
      meta: { title: 'route.system.userList' }
    }
  ]
}
</example>

<example type="invalid">
// ❌ 错误的开发顺序: 先开始编写业务代码，再定义API和模型
// user-list.vue
<script setup>
import { ref } from 'vue'

// 没有先定义API和模型，直接在组件中实现
const fetchUsers = () => {
  axios.get('/user/list').then(res => {
    userList.value = res.data.list
  })
}
</script>

// ❌ 没有定义模型直接使用API
// user-api.ts
import axios from 'axios'  // 直接使用axios而不是request工具函数

export const getUserList = (params) => axios.get('/user/list', { params })

// ❌ 没有定义枚举直接使用字符串
<el-tag v-if="user.role === 'admin'">管理员</el-tag>
</example> 