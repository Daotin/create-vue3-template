---
description: Models模块编码规则
globs: src/models/**/*
---

# Models模块编码规则

## 文件结构

- 所有数据模型接口定义应放在`src/models`目录下
- 按业务功能或实体类型进行分类组织文件
- 相关联的数据模型应放在同一个文件中

## 命名规范

- 文件名使用小写字母，采用camelCase命名法
- 接口名称使用大驼峰命名法，前缀为大写字母`I`，如`IUserInfo`
- 类型别名使用大驼峰命名法，前缀为大写字母`T`，如`TStatusOption`
- 枚举使用大驼峰命名法，不加前缀，如`UserRole`

## 代码规范

- 使用TypeScript接口(interface)定义数据结构
- 使用类型别名(type)定义复杂类型或联合类型
- 每个接口都应该有详细的属性注释
- 可选属性使用`?`标记
- 尽量使用TypeScript内置类型及其组合

## 示例代码

```typescript
// 通用对象接口
export interface IObject {
	[x: string]: any
}

// 登录请求参数接口
export interface ILoginParams {
	username: string
	password: string
	// 如果有验证码等其他字段也可以在这里添加
	captcha?: string
}

// 登录响应数据接口
export interface ILoginResponse {
	token: string
	// 可能还会包含一些基础用户信息
	userId: string | number
	username: string
	// 其他可能的字段
	roles?: string[]
	permissions?: string[]
}
```

## 接口实现要求

1. 为每个接口添加注释，说明用途
2. 为每个属性添加注释，说明含义和用途
3. 清晰标明必选和可选属性
4. 使用准确的类型，避免过度使用`any`
5. 相关接口应保持一致的命名风格
6. 复杂对象应拆分为多个子接口

## 类型复用原则

1. 共用类型应在合适的文件中定义，避免重复定义
2. 使用扩展接口继承通用属性
3. 使用Pick, Omit等工具类型组合现有类型
4. 使用联合类型表示多种可能值
5. 使用交叉类型组合多个接口

## 特殊类型处理

- 分页数据使用泛型接口：`IPageResponse<T>`
- 通用响应使用泛型接口：`IResponse<T>`
- 表格数据使用专用接口：`ITableData`
- 选项数据使用专用接口：`IOption`
