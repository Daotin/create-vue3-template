{
	"compilerOptions": {
		// 使用的ES版本
		"module": "ESNext",
		// 用于选择模块解析策略
		"moduleResolution": "nodenext",
		// 是否可以导入 json module
		"resolveJsonModule": true,
		// 是否可以导入 class fields
		"useDefineForClassFields": true,

		// 指定 jsx 代码的生成: 'preserve', 'react-native', or 'react'
		"jsx": "preserve",

		// 是否禁止隐式 this
		"noImplicitThis": true,
		// 开启严格模式
		"strict": true,

		// 是否开启独立模块
		"isolatedModules": true,

		// 通过为导入内容创建命名空间，实现CommonJS和ES模块之间的互操作性
		"esModuleInterop": true,

		// 强制代码中使用的模块文件名必须和文件系统中的文件名保持大小写一致
		"forceConsistentCasingInFileNames": true,
		// 启用阻止对下载库的类型检查
		"skipLibCheck": true,

		// 使用绝对路径时使用baseUrl去解析导入路径
		"baseUrl": ".",

		// 为导入路径配置别名
		"paths": {
			"@/*": ["src/*"],
			"#/*": ["types/*"]
		},
		// ts中可以使用的库 这里配置为 dom 与 es模块
		"lib": ["esnext", "dom", "dom.iterable"],
		// types用来指定需要包含的模块
		"types": ["vite/client", "element-plus/global"],
		// 编译出JS的目标ES版本
		"target": "esnext",

		// 允许使用 js 文件
		"allowJs": false,

		// 允许使用 xxx 代替 * as xxx 导入
		"allowSyntheticDefaultImports": true,

		// 用来指定编译时是否生成.map文件
		"sourceMap": true,

		// 是否检测定义了但是没使用的变量
		"noUnusedLocals": true,
		// 是否检查是否有在函数体中没有使用的参数
		"noUnusedParameters": true,
		// 是否启用实验性的装饰器特性
		"experimentalDecorators": true,

		// 不允许变量或函数参数具有隐式any类型
		"noImplicitAny": false,

		// 编译的时候删除注释
		"removeComments": true,

		// 配置虚拟目录
		"rootDirs": []
	},
	"include": [
		"src/**/*",
		"src/**/*.vue",
		"src/**/*.ts",
		"src/**/*.d.ts",
		"src/**/*.tsx",
		"types/**/*.d.ts",
		"types/**/*.ts",
		"public/**/*.js",
		"public/**/*.ts",
		"vite.config.ts"
	],
	// 指定不需要编译的文件
	"exclude": ["node_modules", "dist"]
}

/**
参数说明
文档：https://typescript.bootcss.com/compiler-options.html
*/

// importsNotUsedAsValues，通过它可以来控制没被使用的导入语句将会被如何处理，它提供来三个不同的选项。

// remove，这是现在的行为 —— 丢弃这些导入语句。这仍然是默认行为，没有破坏性的更改
// preserve，它将会保留所有的语句，即使是从来没有被使用。它可以保留副作用
// error，它将会保留所有的导入（与 preserve 选项相同）语句，但是当一个值的导入仅仅用于类型时将会抛出错误。如果你想确保没有意外导入任何值，这会是有用的，但是对于副作用，你仍然需要添加额外的导入语法。

/**
问题：使用路由懒加载报错：ES5/ES3 中的动态导入调用需要 “Promise” 构造函数。请确保对 “Promise” 构造函数进行了声明或在 “--lib” 选项中包含了 “ES2015”
解决："lib": ["esnext"]
**/

/*
找不到名称“process”。是否需要为节点安装类型定义
解决：
1、npm i --save-dev @types/node 
2、添加 "types": ["node"]
*/

/*
属性“XXX”在类型“Window & typeof globalThis”上不存在。
解决：
在某个*.d.ts声明
declare interface Window {
  xxx: any
}
*/
