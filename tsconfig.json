{
	"extends": "@vue/tsconfig/tsconfig.web.json",
	"include": ["src/**/*", "src/**/*.vue", "src/**/*.ts", "src/**/*.d.ts", "src/**/*.tsx"],
	"compilerOptions": {
		"baseUrl": ".",
		"paths": {
			"@/*": ["./src/*"]
		},
		"lib": ["esnext", "dom"],
		"types": ["node"]
	},

	"references": [
		{
			"path": "./tsconfig.config.json"
		}
	]
}

/**
参数说明
文档：https://typescript.bootcss.com/compiler-options.html
*/

// importsNotUsedAsValues，通过它可以来控制没被使用的导入语句将会被如何处理，它提供来三个不同的选项。

// remove，这是现在的行为 —— 丢弃这些导入语句。这仍然是默认行为，没有破坏性的更改
// preserve，它将会保留所有的语句，即使是从来没有被使用。它可以保留副作用
// error，它将会保留所有的导入（与 preserve 选项相同）语句，但是当一个值的导入仅仅用于类型时将会抛出错误。如果你想确保没有意外导入任何值，这会是有用的，但是对于副作用，你仍然需要添加额外的导入语法。

/**
问题：使用路由懒加载报错：ES5/ES3 中的动态导入调用需要 “Promise” 构造函数。请确保对 “Promise” 构造函数进行了声明或在 “--lib” 选项中包含了 “ES2015”
解决："lib": ["esnext"]
**/

/*
找不到名称“process”。是否需要为节点安装类型定义
解决：
1、npm i --save-dev @types/node 
2、添加 "types": ["node"]
*/

/*
属性“XXX”在类型“Window & typeof globalThis”上不存在。
解决：
在某个*.d.ts声明
declare interface Window {
  xxx: any
}
*/
